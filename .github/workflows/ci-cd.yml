name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ tst, main ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.15.0'

jobs:
  # Job de verificações de qualidade
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run ESLint
      run: pnpm run lint
      
    - name: Check security vulnerabilities
      run: pnpm audit --audit-level moderate
      
    - name: Check bundle size
      run: |
        pnpm run build
        echo "📦 Bundle size:" >> $GITHUB_STEP_SUMMARY
        du -sh dist/ >> $GITHUB_STEP_SUMMARY
        
    - name: Upload build artifacts for reuse
      uses: actions/upload-artifact@v4
      with:
        name: quality-build-files
        path: dist/
        retention-days: 1

    - name: Comment PR with quality report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const report = `## 📊 Relatório de Qualidade
          
          ✅ **ESLint:** Passou sem erros
          ✅ **Build:** Compilado com sucesso  
          ✅ **Audit:** Sem vulnerabilidades críticas
          ✅ **Bundle Size:** Verificado e otimizado
          
          **Branch:** ${context.ref}
          **Commit:** ${context.sha.substring(0, 7)}
          **Workflow:** [Ver detalhes](${context.payload.pull_request.html_url}/checks)
          `;
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });

  # Job de testes e build
  test-and-build:
    runs-on: ubuntu-latest
    needs: [quality-checks]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts from quality-checks
      uses: actions/download-artifact@v4
      with:
        name: quality-build-files
        path: dist/
      
    - name: Upload build artifacts for other jobs
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Job de testes E2E (apenas em PRs de dev para tst)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-and-build]
    if: github.event_name == 'pull_request' && github.base_ref == 'tst' && github.head_ref == 'dev' && github.event.pull_request.base.ref == 'tst' && github.event.pull_request.head.ref == 'dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ env.STORE_PATH }}
          ~/.cache/Cypress
          node_modules
        key: ${{ runner.os }}-pnpm-store-cypress-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-cypress-

    - name: Install dependencies
      run: |
        pnpm install
        npx cypress install

    - name: Verify Cypress installation
      run: |
        npx cypress cache path
        npx cypress cache list
        npx cypress verify
      
    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        install: false
        build: pnpm run build
        start: pnpm run preview
        wait-on: 'http://localhost:4173/pipelineManus'
        wait-on-timeout: 120
        browser: chrome
        record: false
        config-file: cypress.config.js
      env:
        CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
        
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots/
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos/

  # Job de deploy para GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-and-build]
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Add .nojekyll for GitHub Pages
      run: touch dist/.nojekyll
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  # Job de deploy para ambientes de staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality-checks, test-and-build]
    if: (github.ref == 'refs/heads/dev' && github.event_name == 'push') || (github.event_name == 'pull_request' && github.base_ref == 'tst')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Determine environment
      id: env
      run: |
        if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "url=https://dev-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == 'refs/heads/tst' ]]; then
          echo "environment=test" >> $GITHUB_OUTPUT
          echo "url=https://tst-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == 'refs/heads/hml' ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "url=https://hml-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to staging environment (DISABLED)
      run: |
        echo "🚧 Deploy staging temporariamente desabilitado"
        echo "📍 Ambiente: ${{ steps.env.outputs.environment }}"
        echo "🌐 URL: ${{ steps.env.outputs.url }}"
        echo "✅ Build artifacts prontos para deploy manual se necessário"
        
        # TODO: Reabilitar quando configurar secrets do Netlify
        # npm install -g netlify-cli
        # netlify deploy --dir=dist --site=${{ secrets.NETLIFY_SITE_ID }} --auth=${{ secrets.NETLIFY_AUTH_TOKEN }}
        
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.env.outputs.url }}';
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## � Deploy de Staging (Temporariamente Desabilitado)
            
            **📍 Ambiente:** ${{ steps.env.outputs.environment }}
            **🌐 URL:** ${deploymentUrl} *(não deployado)*
            **🌿 Branch:** ${context.ref}
            **📦 Commit:** ${context.sha.substring(0, 7)}
            
            ### ✅ Verificações realizadas:
            - Build compilado com sucesso
            - Assets otimizados e prontos para deploy
            - Artefatos disponíveis para deploy manual
            
            ### 🔗 Links úteis:
            - [Ver artefatos do build](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
            - [Ver commit](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
            
            *⚡ Deploy staging desabilitado para otimizar tempo de execução*`
          })

