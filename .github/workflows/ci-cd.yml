name: CI/CD Pipeline

on:
  push:
    branches: [ prd, main ]
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ tst ]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write
  pages: write
  id-token: write

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.4.1'

jobs:
  # Job de testes e build
  test-and-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Run linting
      run: pnpm run lint
      
    - name: Build application
      run: pnpm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  # Job de testes E2E (apenas em PRs de dev para tst)
  e2e-tests:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.event_name == 'pull_request' && github.base_ref == 'tst' && github.head_ref == 'dev' && github.event.pull_request.base.ref == 'tst' && github.event.pull_request.head.ref == 'dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - name: Setup pnpm cache
      uses: actions/cache@v4
      with:
        path: ${{ env.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-

    - name: Cache Cypress binary
      uses: actions/cache@v4
      with:
        path: ~/.cache/Cypress
        key: cypress-binary-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          cypress-binary-

    - name: Install dependencies
      run: |
        pnpm setup
        pnpm install --unsafe-perm
        pnpm rebuild
      
    - name: Verify Cypress
      run: npx cypress verify

    - name: Run Cypress tests
      uses: cypress-io/github-action@v6
      with:
        build: pnpm run build
        start: pnpm run preview
        wait-on: 'http://localhost:4173'
        wait-on-timeout: 120
        browser: chrome
        record: false
        install: false # jÃ¡ instalamos as dependÃªncias anteriormente
        
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots/
        
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-videos
        path: cypress/videos/

  # Job de deploy para GitHub Pages
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build]
    if: github.ref == 'refs/heads/prd' || github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install
      
    - name: Build for production
      run: pnpm run build
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # Job de deploy para ambientes de staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test-and-build, e2e-tests]
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/tst' || github.ref == 'refs/heads/hml'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Determine environment
      id: env
      run: |
        if [[ $GITHUB_REF == 'refs/heads/dev' ]]; then
          echo "environment=development" >> $GITHUB_OUTPUT
          echo "url=https://dev-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == 'refs/heads/tst' ]]; then
          echo "environment=test" >> $GITHUB_OUTPUT
          echo "url=https://tst-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        elif [[ $GITHUB_REF == 'refs/heads/hml' ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "url=https://hml-cicd-demo.netlify.app" >> $GITHUB_OUTPUT
        fi
        
    - name: Deploy to staging environment
      run: |
        echo "Deploying to ${{ steps.env.outputs.environment }} environment"
        echo "URL: ${{ steps.env.outputs.url }}"
        # Aqui seria feito o deploy real para o ambiente de staging
        # Por exemplo, usando Netlify CLI, Vercel CLI, ou outro serviÃ§o
        
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ Deploy realizado com sucesso!\n\n**Ambiente:** ${{ steps.env.outputs.environment }}\n**URL:** ${{ steps.env.outputs.url }}\n**Branch:** ${context.ref}`
          })

