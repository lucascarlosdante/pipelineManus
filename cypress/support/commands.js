// ***********************************************
// This example commands.js shows you how to
// create various custom commands and overwrite
// existing commands.
//
// For more comprehensive examples of custom
// commands please read more here:
// https://on.cypress.io/custom-commands
// ***********************************************

// Comando para fazer login 
Cypress.Commands.add('login', (email = 'teste@email.com', password = '123456') => {
  cy.log('üîÑ [LOGIN] Iniciando processo de login...')
  
  const basePath = Cypress.env('CI') ? '/pipelineManus' : ''
  cy.log(`üìç [LOGIN] BasePath: "${basePath}"`)
  
  cy.visit(`${basePath}/#/login`)
  cy.log(`‚úÖ [LOGIN] Visitando: ${basePath}/#/login`)
  
  // Aguarda a p√°gina de login carregar completamente
  cy.log('‚è≥ [LOGIN] Aguardando p√°gina de login carregar...')
  cy.contains('Entrar').should('be.visible')
  
  cy.log('üìù [LOGIN] Preenchendo credenciais...')
  cy.get('[data-testid="email-input"]').type(email)
  cy.get('[data-testid="password-input"]').type(password)
  
  cy.log('üñ±Ô∏è [LOGIN] Clicando no bot√£o de login...')
  cy.get('[data-testid="login-button"]').click()
  
  // Aguarda a transi√ß√£o para o dashboard
  cy.log('‚è≥ [LOGIN] Aguardando redirecionamento para dashboard...')
  cy.location('hash').should('include', '/dashboard')
  cy.contains('Dashboard').should('be.visible')
  
  cy.log('‚úÖ [LOGIN] Login conclu√≠do com sucesso!')
})

// Comando para fazer logout
Cypress.Commands.add('logout', () => {
  cy.log('üîÑ [LOGOUT] Iniciando processo de logout...')
  
  cy.log('üîç [LOGOUT] Procurando bot√£o de logout...')
  
  // Procura por diferentes seletores poss√≠veis para o bot√£o de logout
  cy.get('body').then(($body) => {
    if ($body.find('[data-testid="logout-button"]').length > 0) {
      cy.log('‚úÖ [LOGOUT] Bot√£o encontrado via data-testid')
      cy.get('[data-testid="logout-button"]').click({ force: true })
    } else if ($body.find('button:contains("Logout")').length > 0) {
      cy.log('‚úÖ [LOGOUT] Bot√£o encontrado via texto "Logout"')
      cy.contains('button', 'Logout').click({ force: true })
    } else if ($body.find('button:contains("Sair")').length > 0) {
      cy.log('‚úÖ [LOGOUT] Bot√£o encontrado via texto "Sair"')
      cy.contains('button', 'Sair').click({ force: true })
    } else {
      cy.log('‚ùå [LOGOUT] Bot√£o de logout n√£o encontrado!')
      // Lista todos os bot√µes dispon√≠veis para debug
      cy.get('button').then(($buttons) => {
        const buttonTexts = Array.from($buttons).map(btn => btn.textContent.trim())
        cy.log(`üìù [LOGOUT] Bot√µes dispon√≠veis: ${buttonTexts.join(', ')}`)
      })
      // For√ßa o teste a falhar com uma mensagem clara
      cy.get('[data-testid="logout-button"]')
        .should('be.visible')
        .click({ force: true })
    }
  })
  
  cy.log('‚úÖ [LOGOUT] Bot√£o clicado, aguardando redirecionamento...')
  
  // No ambiente CI, use uma estrat√©gia mais robusta
  if (Cypress.env('CI')) {
    cy.log('üîß [LOGOUT] Usando estrat√©gia CI - verifica√ß√£o por polling')
    
    // Verifica√ß√£o por polling sem depender do evento 'load'
    cy.window().then((win) => {
      const checkRedirect = () => {
        return win.location.hash.includes('/login')
      }
      
      // Aguarda at√© 10 segundos pela mudan√ßa de hash
      const startTime = Date.now()
      const timeout = 10000
      
      const poll = () => {
        if (checkRedirect()) {
          cy.log('‚úÖ [LOGOUT] Redirecionamento detectado via polling')
          return
        }
        
        if (Date.now() - startTime > timeout) {
          throw new Error(`Timeout ap√≥s ${timeout}ms aguardando redirecionamento`)
        }
        
        setTimeout(poll, 500)
      }
      
      poll()
    })
    
    // Verifica√ß√£o adicional do elemento
    cy.contains('Entrar').should('be.visible')
    
  } else {
    // Estrat√©gia local (mais r√°pida)
    cy.log('üè† [LOGOUT] Usando estrat√©gia local')
    
    cy.location('hash').should('include', '/login')
    cy.contains('Entrar').should('be.visible')
  }
  
  cy.log('‚úÖ [LOGOUT] Logout conclu√≠do com sucesso!')
})

// Comando para adicionar um item
Cypress.Commands.add('addItem', (name, description, priority = 'medium', category = 'geral') => {
  cy.get('[data-testid="add-item-button"]').click()
  cy.get('[data-testid="add-name-input"]').type(name)
  cy.get('[data-testid="add-description-input"]').type(description)
  cy.get('[data-testid="add-priority-select"]').click()
  cy.contains(priority === 'low' ? 'Baixa' : priority === 'high' ? 'Alta' : 'M√©dia').click()
  cy.get('[data-testid="add-category-select"]').click()
  cy.contains(category === 'trabalho' ? 'Trabalho' : category === 'pessoal' ? 'Pessoal' : category === 'projeto' ? 'Projeto' : 'Geral').click()
  cy.get('[data-testid="add-submit-button"]').click()
})

// Comando para verificar se um item existe na tabela
Cypress.Commands.add('itemShouldExist', (itemName) => {
  // Aguarda a tabela estar vis√≠vel e cont√©m o item
  cy.get('[data-testid="items-table"]').should('be.visible')
  cy.get('[data-testid="items-table"]').should('contain', itemName)
})

// Comando para verificar o ambiente atual
Cypress.Commands.add('checkEnvironment', (environment) => {
  const envNames = {
    dev: 'Desenvolvimento',
    tst: 'Teste',
    hml: 'Homologa√ß√£o',
    prd: 'Produ√ß√£o'
  }
  cy.contains(`Ambiente: ${envNames[environment]}`).should('be.visible')
})

